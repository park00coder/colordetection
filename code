import cv2
import numpy as np
import pandas as pd
import argparse

# Create an argument parser to take the image path from the command line
ap = argparse.ArgumentParser()
ap.add_argument('-i', '--image', required=True, help="Image Path")
args = vars(ap.parse_args())
img_path = args['image']

# Read the image with OpenCV
img = cv2.imread(img_path)

# Check if the image was successfully loaded
if img is None:
    print("Error: Unable to load the image.")
else:
    # Declare global variables (used later on)
    clicked = False
    r = g = b = xpos = ypos = 0

    # Reading a CSV file with pandas and giving names to each column
    index = ["color", "color_name", "hex", "R", "G", "B"]
    csv = pd.read_csv('colors.csv', names=index, header=None)

    # Function to calculate the minimum distance from all colors and get the most matching color
    def getColorName(R, G, B):
        minimum = 10000
        color_name = ""
        for i in range(len(csv)):
            d = abs(R - int(csv.loc[i, "R"])) + abs(G - int(csv.loc[i, "G"])) + abs(B - int(csv.loc[i, "B"]))
            if d <= minimum:
                minimum = d
                color_name = csv.loc[i, "color_name"]
        return color_name

    # Function to get x, y coordinates on a double click
    def draw_function(event, x, y, flags, param):
        if event == cv2.EVENT_LBUTTONDBLCLK:
            global b, g, r, xpos, ypos, clicked
            clicked = True
            xpos = x
            ypos = y
            b, g, r = img[y, x]

    cv2.namedWindow('image')
    cv2.setMouseCallback('image', draw_function)

    while True:
        cv2.imshow("image", img)
        if clicked:
            # Draw a rectangle to display the selected color
            cv2.rectangle(img, (20, 20), (750, 60), (int(b), int(g), int(r)), -1)

            # Create text to display color name and RGB values
            text = getColorName(r, g, b) + ' R=' + str(r) + ' G=' + str(g) + ' B=' + str(b)
            
            # Determine text color based on the brightness of the background
            text_color = (0, 0, 0) if r + g + b >= 600 else (255, 255, 255)

            # Draw the text on the image
            cv2.putText(img, text, (50, 50), 2, 0.8, text_color, 2, cv2.LINE_AA)
            clicked = False

        # Break the loop when the user hits the 'esc' key    
        if cv2.waitKey(20) & 0xFF == 27:
            break

    cv2.destroyAllWindows()
